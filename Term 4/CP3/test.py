def TopologicalSort(G):
    # Создать словарь степеней
    in_degrees = dict((u, 0) for u in G)
    # Получить степень каждого узла
    for u in G:
        for v in G[u]:
            in_degrees[v] += 1
    # Использовать список в качестве очереди и добавить запись со степенью 0 в очередь
    Q = [u for u in G if in_degrees[u] == 0]
    res = []
    # Выполняется при наличии элементов в очереди
    while Q:
        # Удалить элементы из головы очереди
        u = Q.pop()
        # Сохранение полученных элементов в результате
        res.append(u)
        # Удалить указатели, относящиеся к удаленным элементам, то есть уменьшить вход всех элементов, относящихся к удаленным элементам, на 1
        for v in G[u]:
            in_degrees[v] -= 1
        # Если удаленный элемент указывает на 0, он добавляется в очередь
            if in_degrees[v] == 0:
                Q.append(v)
    return res

graph = {
'a': ['b'],
'b': ['c'],
'c': ['h'],
'd': ['c'],
'e': ['d', 'g'],
'f': ['e'],
'g': ['c'],
'h': [],
}

print(TopologicalSort(graph))
# Объяснить этот код, чтобы получить 10 баллов.
